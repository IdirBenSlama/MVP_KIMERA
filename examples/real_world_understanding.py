"""
Real-World Understanding Application
Demonstrates KIMERA's semantic grounding in practical scenarios
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.semantic_grounding import (
    EmbodiedSemanticEngine,
    CausalReasoningEngine,
    TemporalDynamicsEngine,
    IntentionalProcessor
)
from backend.semantic_grounding.intentional_processor import Goal, GoalPriority
from backend.vault.understanding_vault_manager import UnderstandingVaultManager
import json
from datetime import datetime, timedelta
import numpy as np


class RealWorldUnderstanding:
    """Application for understanding real-world scenarios"""
    
    def __init__(self):
        self.semantic_engine = EmbodiedSemanticEngine()
        self.causal_engine = CausalReasoningEngine()
        self.temporal_engine = TemporalDynamicsEngine()
        self.intentional_processor = IntentionalProcessor()
        self.understanding_vault = UnderstandingVaultManager()
        
    def understand_weather_scenario(self):
        """Understand a complex weather scenario"""
        print("\n" + "="*80)
        print("üå¶Ô∏è UNDERSTANDING WEATHER SCENARIO")
        print("="*80)
        
        # Set learning goal
        weather_goal = Goal(
            goal_id="weather_understanding",
            description="Understand weather patterns and their effects",
            priority=GoalPriority.HIGH,
            criteria={
                "concepts": ["rain", "temperature", "pressure", "humidity"],
                "causal_chains": 5,
                "predictions": 3
            }
        )
        self.intentional_processor.set_goal(weather_goal)
        
        # Process weather concepts
        weather_concepts = {
            "low_pressure": {
                "context": {
                    "physical_properties": {"pressure": 980, "unit": "hPa"},
                    "temporal_aspect": "developing over 6 hours"
                }
            },
            "cloud_formation": {
                "context": {
                    "visual_features": {"color": "dark gray", "shape": "cumulonimbus"},
                    "altitude": "2000-12000 meters"
                }
            },
            "precipitation": {
                "context": {
                    "physical_properties": {"state": "liquid", "rate": "5mm/hour"},
                    "temporal_pattern": "intermittent"
                }
            }
        }
        
        print("\nüìö Grounding weather concepts:")
        groundings = {}
        
        for concept, details in weather_concepts.items():
            grounding = self.semantic_engine.process_concept(concept, details["context"])
            groundings[concept] = grounding
            print(f"  - {concept}: confidence={grounding.confidence:.2f}")
            
            # Store in vault
            self.understanding_vault.create_multimodal_grounding(
                concept_id=concept,
                visual_features=grounding.visual,
                physical_properties=grounding.physical,
                temporal_context=grounding.temporal,
                confidence_score=grounding.confidence
            )
        
        # Establish causal relationships
        print("\nüîó Discovering causal relationships:")
        
        # Low pressure causes cloud formation
        rel1 = self.understanding_vault.establish_causal_relationship(
            cause_concept_id="low_pressure",
            effect_concept_id="cloud_formation",
            causal_strength=0.8,
            mechanism_description="Low pressure creates updrafts that cool air, causing condensation",
            temporal_delay=3600.0  # 1 hour
        )
        print(f"  - low_pressure ‚Üí cloud_formation (delay: 1 hour)")
        
        # Cloud formation causes precipitation
        rel2 = self.understanding_vault.establish_causal_relationship(
            cause_concept_id="cloud_formation",
            effect_concept_id="precipitation",
            causal_strength=0.7,
            mechanism_description="Water droplets in clouds grow and fall as rain",
            temporal_delay=1800.0  # 30 minutes
        )
        print(f"  - cloud_formation ‚Üí precipitation (delay: 30 min)")
        
        # Make prediction
        print("\nüîÆ Predicting weather progression:")
        
        # Current observation: low pressure detected
        current_time = datetime.now()
        
        # Predict cloud formation
        cloud_time = current_time + timedelta(hours=1)
        print(f"  - Expect cloud formation by {cloud_time.strftime('%H:%M')}")
        
        # Predict precipitation
        rain_time = current_time + timedelta(hours=1.5)
        print(f"  - Expect precipitation by {rain_time.strftime('%H:%M')}")
        
        # Check goal progress
        status = self.intentional_processor.get_goal_status("weather_understanding")
        print(f"\nüìä Weather understanding progress: {status['progress']:.1%}")
        
        return groundings
    
    def understand_cooking_process(self):
        """Understand cooking as a transformation process"""
        print("\n" + "="*80)
        print("üç≥ UNDERSTANDING COOKING PROCESS")
        print("="*80)
        
        # Define cooking scenario
        cooking_steps = [
            {
                "step": "heat_pan",
                "temperature": 180,  # Celsius
                "duration": 120,  # seconds
                "physical_change": "metal expansion"
            },
            {
                "step": "add_oil",
                "temperature": 180,
                "state_change": "oil spreads and heats",
                "viscosity_change": "decreases"
            },
            {
                "step": "add_egg",
                "temperature": 180,
                "state_change": "liquid to solid",
                "chemical_change": "protein denaturation"
            },
            {
                "step": "cooked_egg",
                "temperature": 75,  # Internal temp
                "texture": "firm",
                "color": "white and yellow"
            }
        ]
        
        print("\nüîÑ Processing cooking transformation:")
        
        # Create temporal sequence
        observations = []
        base_time = 0
        
        for i, step in enumerate(cooking_steps):
            # Ground the concept
            grounding = self.semantic_engine.process_concept(
                step["step"],
                context={
                    "physical_properties": {
                        "temperature": step.get("temperature"),
                        "state": step.get("state_change", "solid")
                    },
                    "temporal_sequence": i
                }
            )
            
            # Add to temporal observations
            observations.append({
                "timestamp": base_time,
                "value": step.get("temperature", 20),
                "state": step["step"]
            })
            base_time += step.get("duration", 60)
            
            print(f"  {i+1}. {step['step']}: {step.get('state_change', 'no change')}")
        
        # Analyze temporal evolution
        evolution = self.temporal_engine.analyze_temporal_evolution(
            "cooking_process",
            observations
        )
        
        print(f"\nüìà Process evolution: {evolution['evolution_type']}")
        print(f"  - Duration: {evolution['time_span']} seconds")
        print(f"  - Phases identified: {len(evolution['phases'])}")
        
        # Establish transformations
        print("\nüîÑ Transformations discovered:")
        
        # Heat causes protein denaturation
        self.understanding_vault.establish_causal_relationship(
            cause_concept_id="heat_pan",
            effect_concept_id="cooked_egg",
            causal_strength=0.9,
            mechanism_description="Heat denatures proteins, changing texture and color",
            temporal_delay=180.0,
            counterfactual_scenarios=[{
                "scenario": "no heat",
                "result": "egg remains liquid"
            }]
        )
        print("  - heat ‚Üí protein denaturation ‚Üí cooked egg")
        
        # Physical understanding
        print("\n‚öõÔ∏è Physical understanding:")
        for step in ["heat_pan", "add_oil", "add_egg", "cooked_egg"]:
            props = self.semantic_engine.get_grounding(step)
            if props and props.physical:
                print(f"  - {step}: temperature={props.physical.get('temperature', 'unknown')}¬∞C")
        
        return evolution
    
    def understand_plant_growth(self):
        """Understand plant growth as a complex biological process"""
        print("\n" + "="*80)
        print("üå± UNDERSTANDING PLANT GROWTH")
        print("="*80)
        
        # Define growth stages
        growth_stages = {
            "seed": {
                "day": 0,
                "height": 0,
                "requirements": ["water", "warmth"],
                "state": "dormant"
            },
            "germination": {
                "day": 3,
                "height": 0.5,
                "requirements": ["water", "warmth", "darkness"],
                "state": "sprouting"
            },
            "seedling": {
                "day": 7,
                "height": 5,
                "requirements": ["water", "light", "nutrients"],
                "state": "growing"
            },
            "young_plant": {
                "day": 21,
                "height": 20,
                "requirements": ["water", "light", "nutrients", "space"],
                "state": "developing"
            },
            "mature_plant": {
                "day": 60,
                "height": 100,
                "requirements": ["water", "light", "nutrients", "pollination"],
                "state": "flowering"
            }
        }
        
        print("\nüå± Grounding growth stages:")
        
        # Process each stage
        time_series = []
        for stage_name, stage_data in growth_stages.items():
            # Ground the concept with biological context
            grounding = self.semantic_engine.process_concept(
                stage_name,
                context={
                    "temporal_aspect": f"day {stage_data['day']}",
                    "physical_properties": {
                        "height": stage_data['height'],
                        "state": stage_data['state']
                    },
                    "requirements": stage_data['requirements']
                }
            )
            
            # Build time series
            time_series.append({
                "timestamp": stage_data['day'] * 86400,  # Convert to seconds
                "value": stage_data['height'],
                "state": stage_name
            })
            
            print(f"  - {stage_name} (day {stage_data['day']}): height={stage_data['height']}cm")
        
        # Analyze growth pattern
        growth_analysis = self.temporal_engine.analyze_temporal_evolution(
            "plant_growth",
            time_series
        )
        
        print(f"\nüìä Growth analysis:")
        print(f"  - Pattern: {growth_analysis['evolution_type']}")
        print(f"  - Current stage: {growth_analysis.get('lifecycle_stage', 'unknown')}")
        
        # Establish growth dependencies
        print("\nüîó Growth dependencies:")
        
        # Water enables germination
        self.understanding_vault.establish_causal_relationship(
            cause_concept_id="water",
            effect_concept_id="germination",
            causal_strength=0.95,
            mechanism_description="Water activates enzymes and softens seed coat",
            evidence_quality=0.9
        )
        print("  - water ‚Üí germination")
        
        # Light enables photosynthesis
        self.understanding_vault.establish_causal_relationship(
            cause_concept_id="light",
            effect_concept_id="young_plant",
            causal_strength=0.9,
            mechanism_description="Light energy drives photosynthesis for growth",
            evidence_quality=0.95
        )
        print("  - light ‚Üí photosynthesis ‚Üí growth")
        
        # Predict future growth
        if time_series:
            last_observation = time_series[-1]['timestamp']
            prediction = self.temporal_engine.predict_next_occurrence(
                "mature_plant",
                last_occurrence=last_observation
            )
            
            if prediction and prediction.get('next_occurrence'):
                days_to_maturity = (prediction['next_occurrence'] - last_observation) / 86400
                print(f"\nüîÆ Prediction: Full maturity in ~{days_to_maturity:.0f} more days")
        
        return growth_analysis
    
    def understand_traffic_patterns(self):
        """Understand urban traffic as a complex dynamic system"""
        print("\n" + "="*80)
        print("üöó UNDERSTANDING TRAFFIC PATTERNS")
        print("="*80)
        
        # Define traffic observations
        traffic_data = {
            "morning_rush": {
                "time": "07:00-09:00",
                "flow_rate": 2000,  # vehicles/hour
                "speed": 25,  # km/h
                "congestion": "high"
            },
            "midday": {
                "time": "11:00-13:00",
                "flow_rate": 800,
                "speed": 50,
                "congestion": "low"
            },
            "evening_rush": {
                "time": "17:00-19:00",
                "flow_rate": 2200,
                "speed": 20,
                "congestion": "very high"
            },
            "night": {
                "time": "22:00-05:00",
                "flow_rate": 200,
                "speed": 60,
                "congestion": "none"
            }
        }
        
        print("\nüö¶ Analyzing traffic patterns:")
        
        # Ground traffic concepts
        for period, data in traffic_data.items():
            grounding = self.semantic_engine.process_concept(
                period,
                context={
                    "temporal_context": {"time_range": data["time"]},
                    "physical_properties": {
                        "flow_rate": data["flow_rate"],
                        "speed": data["speed"]
                    },
                    "congestion_level": data["congestion"]
                }
            )
            
            print(f"  - {period}: {data['flow_rate']} vehicles/hr @ {data['speed']} km/h")
        
        # Discover patterns
        print("\nüìä Pattern discovery:")
        
        # High flow causes low speed
        self.understanding_vault.establish_causal_relationship(
            cause_concept_id="high_traffic_flow",
            effect_concept_id="reduced_speed",
            causal_strength=0.85,
            mechanism_description="High vehicle density reduces available space and speed",
            evidence_quality=0.9
        )
        print("  - high flow ‚Üí reduced speed (inverse relationship)")
        
        # Work schedule causes rush hour
        self.understanding_vault.establish_causal_relationship(
            cause_concept_id="work_schedule",
            effect_concept_id="morning_rush",
            causal_strength=0.9,
            mechanism_description="Standard work hours create synchronized travel demand",
            temporal_delay=0.0
        )
        print("  - work schedule ‚Üí rush hour patterns")
        
        # Counterfactual analysis
        print("\nü§î Counterfactual reasoning:")
        counterfactual = self.causal_engine.reason_counterfactually(
            "morning_rush",
            intervention={"change": {"property": "work_schedule", "value": "flexible"}}
        )
        
        print("  What if work schedules were flexible?")
        print(f"  - Direct effects: {len(counterfactual['direct_effects'])}")
        print(f"  - Likely outcome: Distributed traffic flow, reduced peak congestion")
        
        return traffic_data
    
    def demonstrate_cross_domain_understanding(self):
        """Show how understanding transfers across domains"""
        print("\n" + "="*80)
        print("üîÑ CROSS-DOMAIN UNDERSTANDING")
        print("="*80)
        
        # Find common patterns across domains
        print("\nüîç Finding universal patterns:")
        
        # Growth pattern (plants, economy, knowledge)
        growth_concepts = ["plant_growth", "economic_growth", "knowledge_growth"]
        print("\nüìà Growth patterns:")
        for concept in growth_concepts:
            grounding = self.semantic_engine.process_concept(concept)
            if grounding.temporal:
                print(f"  - {concept}: exhibits growth pattern")
        
        # Transformation pattern (cooking, learning, development)
        transformation_concepts = ["cooking", "learning", "metamorphosis"]
        print("\nüîÑ Transformation patterns:")
        for concept in transformation_concepts:
            grounding = self.semantic_engine.process_concept(concept)
            print(f"  - {concept}: involves state change")
        
        # Cyclic pattern (weather, traffic, seasons)
        cyclic_concepts = ["daily_weather", "traffic_pattern", "seasonal_change"]
        print("\nüîÅ Cyclic patterns:")
        for concept in cyclic_concepts:
            grounding = self.semantic_engine.process_concept(concept)
            if grounding.temporal:
                print(f"  - {concept}: shows periodic behavior")
        
        # Abstract the patterns
        print("\nüí° Abstract understanding:")
        
        # Create abstract concept
        abstract_growth = self.understanding_vault.form_abstract_concept(
            concept_name="growth",
            essential_properties={
                "direction": "increasing",
                "continuity": "gradual",
                "requirements": ["resources", "time"],
                "limit": "carrying capacity"
            },
            concrete_instances=[
                {"type": "biological", "example": "plant_growth"},
                {"type": "economic", "example": "gdp_growth"},
                {"type": "cognitive", "example": "knowledge_growth"}
            ],
            abstraction_level=2,
            concept_coherence=0.85
        )
        
        print(f"  ‚úÖ Formed abstract concept 'growth' (ID: {abstract_growth})")
        print("     - Applies to: biological, economic, cognitive domains")
        print("     - Essential: gradual increase requiring resources")
        
        return abstract_growth
    
    def generate_understanding_report(self):
        """Generate a report on current understanding capabilities"""
        print("\n" + "="*80)
        print("üìä UNDERSTANDING CAPABILITY REPORT")
        print("="*80)
        
        # Get metrics from vault
        metrics = self.understanding_vault.get_understanding_metrics()
        
        print("\nüìà Understanding Components:")
        for component, count in metrics['understanding_components'].items():
            print(f"  - {component}: {count}")
        
        print("\nÔøΩÔøΩ Understanding Quality:")
        quality = metrics['understanding_quality']
        print(f"  - Average test accuracy: {quality['average_test_accuracy']:.2%}")
        print(f"  - Understanding quality: {quality['average_understanding_quality']:.2%}")
        
        print("\nüöÄ Roadmap Progress:")
        for phase, progress in metrics['roadmap_progress'].items():
            bar = "‚ñà" * int(progress * 20) + "‚ñë" * (20 - int(progress * 20))
            print(f"  - {phase}: [{bar}] {progress:.1%}")
        
        # Test current understanding
        print("\nüß™ Understanding Tests:")
        
        # Test compositional understanding
        test1 = self.understanding_vault.test_understanding(
            test_type="compositional",
            test_description="Understanding 'heavy rain'",
            test_input={"components": ["heavy", "rain"]},
            expected_output={"meaning": "intense precipitation"},
            actual_output={"meaning": "rain with high intensity"}
        )
        print(f"  - Compositional test: {'‚úÖ PASS' if test1['passed'] else '‚ùå FAIL'}")
        
        # Test causal understanding  
        test2 = self.understanding_vault.test_understanding(
            test_type="causal",
            test_description="Understanding fire causation",
            test_input={"concept": "fire", "question": "what causes it?"},
            expected_output={"causes": ["heat", "fuel", "oxygen"]},
            actual_output={"causes": ["heat", "combustible material", "oxygen"]}
        )
        print(f"  - Causal test: {'‚úÖ PASS' if test2['passed'] else '‚ùå FAIL'}")
        
        return metrics


def main():
    """Run real-world understanding demonstrations"""
    print("\n" + "üåç "*20)
    print("KIMERA REAL-WORLD UNDERSTANDING DEMONSTRATION")
    print("üåç "*20)
    
    app = RealWorldUnderstanding()
    
    # Run understanding scenarios
    weather = app.understand_weather_scenario()
    cooking = app.understand_cooking_process()
    plants = app.understand_plant_growth()
    traffic = app.understand_traffic_patterns()
    
    # Cross-domain understanding
    abstract = app.demonstrate_cross_domain_understanding()
    
    # Generate report
    report = app.generate_understanding_report()
    
    print("\n" + "="*80)
    print("‚úÖ REAL-WORLD UNDERSTANDING DEMONSTRATION COMPLETE")
    print("="*80)
    
    print("\nüéØ Key Achievements:")
    print("1. ‚úÖ Understood weather as causal system")
    print("2. ‚úÖ Understood cooking as transformation process")
    print("3. ‚úÖ Understood plant growth as temporal evolution")
    print("4. ‚úÖ Understood traffic as dynamic system")
    print("5. ‚úÖ Abstracted cross-domain patterns")
    
    print("\nüí° Insights Gained:")
    print("- Causal chains enable prediction")
    print("- Temporal patterns reveal system dynamics")
    print("- Physical grounding constrains possibilities")
    print("- Abstract patterns transfer across domains")
    
    print("\nüîÆ Next Steps:")
    print("1. Expand to more complex scenarios")
    print("2. Integrate with decision-making systems")
    print("3. Build predictive models from understanding")
    print("4. Develop domain-specific expertise")


if __name__ == "__main__":
    main()